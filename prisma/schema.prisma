generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artista {
  nombre         String
  imagen         String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  id             Int              @id @default(autoincrement())
  albums         Album[]
  ArtistaCancion ArtistaCancion[]
}

model Album {
  name      String
  rating    Float?    @default(0)
  isSingle  Boolean?  @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  code      String?
  id        Int       @id @default(autoincrement())
  artistaId Int
  artist    Artista   @relation(fields: [artistaId], references: [id])
  canciones Cancion[]
}

model ArtistaCancion {
  id        Int     @id @default(autoincrement())
  artistaId Int
  cancionId Int
  artista   Artista @relation(fields: [artistaId], references: [id])
  cancion   Cancion @relation(fields: [cancionId], references: [id])
}

model Cancion {
  titulo                   String
  genero                   String?
  urlImagen                String?
  realaseDate              DateTime
  popularity               Int?
  duration                 Int?
  url                      String?
  danceability             Float?
  energy                   Float?
  key                      Int?
  loudness                 Float?
  mode                     Int?
  speechiness              Float?
  acousticness             Float?
  instrumentalness         Float?
  liveness                 Float?
  valence                  Float?
  tempo                    Float?
  code                     String?
  id                       Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now()) @map("created_at")
  deletedAt                DateTime?                  @map("deleted_at")
  updatedAt                DateTime?                  @updatedAt @map("updated_at")
  albumId                  Int?
  ArtistaCancion           ArtistaCancion[]
  Album                    Album?                     @relation(fields: [albumId], references: [id])
  CancionListaReproduccion CancionListaReproduccion[]
  Reproduccion             Reproduccion[]
}

model Usuario {
  username          String              @unique
  correo            String              @unique
  password          String
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")
  id                Int                 @id @default(autoincrement())
  ListaReproduccion ListaReproduccion[]
  Reproduccion      Reproduccion[]
}

model Reproduccion {
  duracion          Float
  fechaReproduccion DateTime
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  cancionId         Int
  cancion           Cancion  @relation(fields: [cancionId], references: [id])
  usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model CancionListaReproduccion {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  deletedAt           DateTime?         @map("deleted_at")
  cancionId           Int
  listaReproduccionId Int
  cancion             Cancion           @relation(fields: [cancionId], references: [id])
  listaReproduccion   ListaReproduccion @relation(fields: [listaReproduccionId], references: [id])
}

model ListaReproduccion {
  nombre                   String
  createdAt                DateTime                   @default(now()) @map("created_at")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  deletedAt                DateTime?                  @map("deleted_at")
  id                       Int                        @id @default(autoincrement())
  usuarioId                Int
  CancionListaReproduccion CancionListaReproduccion[]
  usuario                  Usuario                    @relation(fields: [usuarioId], references: [id])
}
